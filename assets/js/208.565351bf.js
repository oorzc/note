(window.webpackJsonp=window.webpackJsonp||[]).push([[208],{761:function(n,s,a){"use strict";a.r(s);var r=a(5),t=Object(r.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"并发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发"}},[n._v("#")]),n._v(" 并发")]),n._v(" "),a("h2",{attrs:{id:"php如何解决网站高并发和大流量问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#php如何解决网站高并发和大流量问题"}},[n._v("#")]),n._v(" php如何解决网站高并发和大流量问题")]),n._v(" "),a("p",[n._v("我们说的高并发是什么?"),a("br"),n._v("\n上面的定义明显不是我们通常所言的并发，在互联网时代，所讲的"),a("br"),n._v("\n并发、高并发，通常是指并发访问。也就是在某个时间点，有多少")]),n._v(" "),a("p",[n._v("通常如果一个系统的日PV在干万以上，有可能是一个高并发的系统"),a("br"),n._v("\n有的公司完全不走技术路线，全靠机器堆，这不在我们的讨论范围")]),n._v(" "),a("p",[n._v("高并发的问题，我们具体该关心什么？")]),n._v(" "),a("p",[n._v("QPS：每秒钟请求或者查询的数量，在互联网领域，指每秒响应请"),a("br"),n._v("\n求数(指HTTP请求)；"),a("br"),n._v("\n吞吐量：单位时间内处理的请求数量（通常由QPS与并发数决定）")]),n._v(" "),a("p",[n._v("响应时间：从请求发出到收到响应花费的时间。例如系统处理一个"),a("br"),n._v("\nHTTP请求需要100ms，这个100ms就是系统的响应时间")]),n._v(" "),a("p",[n._v("PV:综合浏览量（Page View)，即页面浏览量或者点击量，一"),a("br"),n._v("\n个访客在24小时内访问的页面数量")]),n._v(" "),a("p",[n._v("UV:独立访客(UniQue Visitor)，即一定时间范围内相同访客"),a("br"),n._v("\n多次访问网站，只计算为1个独立访客")]),n._v(" "),a("p",[n._v("带宽：计算带宽大小需关注两个指标，峰值流量和页面的平均大小")]),n._v(" "),a("p",[n._v("日网站带宽=PV/统计时间(换算到秒）*平均页面大小(单位KB)*8"),a("br"),n._v("\n峰值一般是平均值的倍数，根据实际情况来定")]),n._v(" "),a("p",[n._v("QPS不等于并发连接数"),a("br"),n._v("\nQPS是每秒HTTP请求数量，并发连接数是系统同时处理的请求数")]),n._v(" "),a("p",[n._v("（总PV数"),a("em",[n._v("80%）/（6小时秒数")]),n._v("20%）=峰值每秒请求数（QPS)"),a("br"),n._v("\n80%的访问量集中在20%的时间")]),n._v(" "),a("p",[n._v("压力测试"),a("br"),n._v("\n测试能承受的最大并发"),a("br"),n._v("\n测试最大承受的QPS值")]),n._v(" "),a("p",[n._v("常用性能测试工具"),a("br"),n._v("\nab、wrk、http_load、Web Bench、Siege、Apache JMeter")]),n._v(" "),a("p",[n._v("ab"),a("br"),n._v("\n全称是apache benchmark，是apache官方推出的工具"),a("br"),n._v("\n创建多个并发访问线程，模拟多个访问者同时对某一URL地址进行"),a("br"),n._v("\n访问。它的测试目标是基于URL的，因此，它既可以用来测试"),a("br"),n._v("\napache的负载压力，也可以测试nginx、lighthttp、tomcat、"),a("br"),n._v("\nIIS等其它Web服务器的压力。")]),n._v(" "),a("p",[n._v("ab的使用"),a("br"),n._v("\n模拟并发请求100次，总共请求5000次"),a("br"),n._v("\nab-c100-n5000待测试网站")]),n._v(" "),a("p",[n._v("注意事项"),a("br"),n._v("\n测试机器与被测试机器分开"),a("br"),n._v("\n不要对线上服务做压力测试"),a("br"),n._v("\n观察测试工具ab所在机器，以及被测试的前端机的CPU，内存，网"),a("br"),n._v("\n络等都不超过最高限度的75%"),a("br"),n._v("\nQPS达到极限"),a("br"),n._v("\n随着QPS的增长，每个阶段需要根据实际情况来进行优化，优化的"),a("br"),n._v("\n方案也与硬件条件、网络带宽息息相关。")]),n._v(" "),a("p",[n._v("QPS达到50"),a("br"),n._v("\n可以称之为小型网站，一般的服务器就可以应付")]),n._v(" "),a("p",[n._v("QPS达到100"),a("br"),n._v("\n假设关系型数据库的每次请求在0.01秒完成"),a("br"),n._v("\n假设单页面只有一个SQL查询，那么100QPS意味着1秒钟完成100"),a("br"),n._v("\n次请求，但是此时我们并不能保证数据库查询能完成100次"),a("br"),n._v("\n方案：数据库缓存层、数据库的负载均衡")]),n._v(" "),a("p",[n._v("QPS达到800"),a("br"),n._v("\n假设我们使用百兆带宽，意味着网站出口的实际带宽是8M左右"),a("br"),n._v("\n假设每个页面只有10K，在这个并发条件下，百兆带宽已经吃完"),a("br"),n._v("\n方案：CDN加速、负载均衡")]),n._v(" "),a("p",[n._v("QPS达到1000"),a("br"),n._v("\n假设使用Memcache缓存数据库查询数据，每个页面对"),a("br"),n._v("\nMemcache的请求远大于直接对DB的请求"),a("br"),n._v("\nMemcache的悲观并发数在2w左右，但有可能在之前内网带宽已"),a("br"),n._v("\n经吃光，表现出不稳定"),a("br"),n._v("\n方案：静态HTML缓存")]),n._v(" "),a("p",[n._v("QPS达到2000"),a("br"),n._v("\n这个级别下，文件系统访问锁都成为了灾难"),a("br"),n._v("\n方案：做业务分离，分布式存储")]),n._v(" "),a("h2",{attrs:{id:"防盗链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#防盗链"}},[n._v("#")]),n._v(" 防盗链")]),n._v(" "),a("p",[n._v("盗链概念"),a("br"),n._v("\n盗链是指在自己的页面上展示一些并不在自己服务器上的内容"),a("br"),n._v("\n获得他人服务器上的资源地址，绕过别人的资源展示页面，直接在"),a("br"),n._v("\n自己的页面上向最终用户提供此内容")]),n._v(" "),a("p",[n._v("常见的是小站盗用大站的图片、音乐、视频、软件等资源"),a("br"),n._v("\n通过盗链的方法可以减轻自己服务器的负担，因为真实的空间和流"),a("br"),n._v("\n量均是来自别人的服务器")]),n._v(" "),a("p",[n._v("防盗链的实现方法"),a("br"),n._v("\nReferer"),a("br"),n._v("\nNginx 模块ngx.http_referer_module用于阻挡来源非法的域"),a("br"),n._v("\n名请求"),a("br"),n._v("\nNginx指令valid_referers，全局变量$invalid_referer")]),n._v(" "),a("p",[n._v("valid_referers none I blocked I server_names I string..…:"),a("br"),n._v('\nnone:"Referer”来源头部为空的情况'),a("br"),n._v("\nblocked:“Referer”来源头部不为空，但是里面的值被代理或"),a("br"),n._v("\n者防火墙删除了，这些值都不以http:/∥或者https://开头.")]),n._v(" "),a("p",[n._v('server_names:"Referer”来源头部包含当前的server_names')]),n._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[n._v("location ~.*"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("\\")]),n._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("giflipglpnglflvlswflrarlzip"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("$\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n\tvalid_referers none blocked imooc.com*.imooc.com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\tif"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("Sinvalid_referer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("#return 403；")]),n._v("\n\t\trewrite M http://www.imooc.com/403.jpg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("#针对目录的防盗链")]),n._v("\nlocation/images/\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n\tvalid_referers none blocked imooc.com*.imooc.com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\tif"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("Sinvalid_referer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("#return 403；")]),n._v("\n\t\trewrite /http:/www.imooc.com/403.jpg；\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br")])]),a("p",[n._v("加密签名"),a("br"),n._v("\n使用第三方模块HttpAccessKeyModule实现Nginx防盗链"),a("br"),n._v("\naccesskey onloff模块开关"),a("br"),n._v("\naccesskey hashmethod md5|sha-1签名加密方式"),a("br"),n._v("\naccesskey_arg GET参数名称"),a("br"),n._v("\naccesskey_ signature 加密规则"),a("br"),n._v("\n实现方法")]),n._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[n._v("location ~.*"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("\\")]),n._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("giflipglpnglflvlswflrarlzip"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("s\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n\taccesskey on,\n\taccesskey_hashmethod md5"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\taccesskey_arg"),a("span",{pre:!0,attrs:{class:"token string"}},[n._v('"key”;\n\taccesskey_signature"')]),n._v('mypasssremote_addr"'),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br")])]),a("h2",{attrs:{id:"线程与进程的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程与进程的区别"}},[n._v("#")]),n._v(" 线程与进程的区别")]),n._v(" "),a("p",[n._v("1.线程是进程内的一个执行单元，进程内至少有一个线程，它们共"),a("br"),n._v("\n享进程的地址空间，而进程有自己独立的地址空间"),a("br"),n._v("\n2.进程是资源分配和拥有的单位，同一个进程内的线程共享进程的资源"),a("br"),n._v("\n3.线程是处理器调度的基本单位，但进程不是"),a("br"),n._v("\n4.二者均可并发执行"),a("br"),n._v("\n5.每个独立的线程有一个程序运行的入口、顺序执行序列和程序的"),a("br"),n._v("\n出口，但是线程不能够独立执行，必须依存在应用程序中，由应用"),a("br"),n._v("\n程序提供多个线程执行控制")]),n._v(" "),a("h2",{attrs:{id:"线程与协程的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程与协程的区别"}},[n._v("#")]),n._v(" 线程与协程的区别")]),n._v(" "),a("p",[n._v("1.一个线程可以多个协程，一个进程也可以单独拥有多个协程"),a("br"),n._v("\n2.线程进程都是同步机制，而协程则是异步"),a("br"),n._v("\n3.协程能保留上一次调用时的状态，每次过程重入时，就相当于进"),a("br"),n._v("\n入上一次调用的状态")]),n._v(" "),a("h2",{attrs:{id:"什么是多进程、多线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是多进程、多线程"}},[n._v("#")]),n._v(" 什么是多进程、多线程")]),n._v(" "),a("p",[n._v("多进程"),a("br"),n._v("\n同一个时间里，同一个计算机系统中如果允许两个或两个以上的进"),a("br"),n._v("\n程处于运行状态，这就是多进程"),a("br"),n._v("\n边看慕课网视频，边使用WebIDE"),a("br"),n._v("\n多开一个进程，多分配一份资源，进程间通讯不方便")]),n._v(" "),a("p",[n._v("多线程"),a("br"),n._v("\n线程就是把一个进程分为很多片，每一片都可以是一个独立的流程"),a("br"),n._v("\n与多进程的区别是只会使用一个进程的资源，线程间可以直接通信")]),n._v(" "),a("p",[n._v("多个概念之间的区别"),a("br"),n._v("\n例子"),a("br"),n._v("\n单进程单线程：一个人在一个桌子上吃菜"),a("br"),n._v("\n单进程多线程：多个人在同一个桌子上一起吃菜"),a("br"),n._v("\n多进程单线程：多个人每个人在自己的桌子上吃菜")]),n._v(" "),a("p",[n._v("同步阻塞"),a("br"),n._v("\n多进程"),a("br"),n._v("\n最早的服务器端程序都是通过多进程、多线程来解决并发IO的问题"),a("br"),n._v("\n一个请求创建一个进程，然后子进程进入循环同步堵塞地与客户端"),a("br"),n._v("\n连接进行交互，收发处理数据"),a("br"),n._v("\n多线程"),a("br"),n._v("\n用多线程模式实现非常简单，线程中可以直接向某一个客户端连接"),a("br"),n._v("\n发送数据")]),n._v(" "),a("h2",{attrs:{id:"php并发编程实践"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#php并发编程实践"}},[n._v("#")]),n._v(" PHP并发编程实践")]),n._v(" "),a("p",[n._v("PHP的Swoole扩展"),a("br"),n._v("\n消息队列"),a("br"),n._v("\n接口的并发请求")])])}),[],!1,null,null,null);s.default=t.exports}}]);