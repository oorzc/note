(window.webpackJsonp=window.webpackJsonp||[]).push([[171],{774:function(n,a,e){"use strict";e.r(a);var i=e(5),t=Object(i.a)({},(function(){var n=this,a=n.$createElement,e=n._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"linux命令的习惯"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linux命令的习惯"}},[n._v("#")]),n._v(" Linux命令的习惯")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("- 命令及参数区分大小写\n- 程序可否执行与扩展名无关\n- 使用tab键来补全命令\n\n$command  [-options]    parameter1   parameter2  …\n\n\t指令          选项             参数1          参数2\n\n说明：\n0. 一行指令中第一个输入的绝对是‘指令(command)’或‘可执行文件’\n1. command 为指令的名称，例如变换路径的指令为 cd 等等；\n2. 中刮号[]并不存在于实际的指令中，而加入参数设定时，通常为 - 号，例如   -h； 有时候完整参数名称会输入 -- 符号，例如 --help；\n3. parameter1 parameter2.. 为依附在 option 后面的参数， 或者是 command        的参数；\n4. command, -options, parameter1.. 这几个中间以空格来区分，不论空几格 shell 都视为一格；\n5. 按下 [Enter] 按键后，该指令就立即执行。\n6. 指令太长的时候，可以使用 \\ 符号来跳脱 [Enter] 符号， 使指令连续到下一行。注意！ \\ 后就立刻接特殊字符。\n7. 在 Linux 系统中，英文大小写字母是不一样的。举例来说， cd 与 CD 并不同。\n")])])]),e("h2",{attrs:{id:"查看目录下有什么文件信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看目录下有什么文件信息"}},[n._v("#")]),n._v(" 查看目录下有什么文件信息")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("> ls  //list查看当前目录下有什么文件\n> ls  -l      //list  -list 通过详细内容形式查看目录下的文件内容\n\n用颜色代表不同文件\n白色：普通文件\n红色：压缩文件\n蓝色：目录文件\n浅蓝色：链接文件\n黄色：设备文件（/dev）\n绿色：可执行文件（/bin、/sbin）\n粉红色：图片文件\n\n> ls  目录    //查看指定目录下文件名字信息\n> ls  -l 目录  //以详细列表形式查看指定目录下文件名字信息\n> ls  -a      //list  all 查看全部文件，包括隐藏文件\n> ls  -al     //list  list all 以详细列表形式查看全部文件，包括隐藏文件\n> win dir 查看指定目录下文件名字信息\n")])])]),e("h3",{attrs:{id:"显示文件和目录树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#显示文件和目录树"}},[n._v("#")]),n._v(" 显示文件和目录树")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("yum -y install tree\n> tree\n用法：  tree    [参数]   {文件}\n参数：  -a   不隐藏任何以.字符开始的条目\n-d   只显示目录不显示文件\n-f    每个文件都显示路径\n-t   根据最后修改时间排序\n-L n 只显示n层目录 （n为数字）\n-N 解决中文乱码 可以加其他命令 例tree -NL 2\n")])])]),e("h3",{attrs:{id:"目录切换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#目录切换"}},[n._v("#")]),n._v(" 目录切换")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("> cd   目录名字\n> cd   ..       //向上级目录切换\n> cd  ~         //快速切换回自己的家目录\n")])])]),e("h3",{attrs:{id:"查看当前操作位置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看当前操作位置"}},[n._v("#")]),n._v(" 查看当前操作位置")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("> pwd\n")])])]),e("h3",{attrs:{id:"查看操作者信息-是谁在操作系统"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看操作者信息-是谁在操作系统"}},[n._v("#")]),n._v(" 查看操作者信息(是谁在操作系统)")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("> whoami\n")])])]),e("h3",{attrs:{id:"不同用户间的切换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#不同用户间的切换"}},[n._v("#")]),n._v(" 不同用户间的切换")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("> su -              //切换为root用户\n> su -  root        //效果同上\n> su  普通用户名称  //向普通用户切换\nexit        //当前用户退回到之前用户\n\nsu多次使用，用户会“累加”，建议“su” 和 “exit”匹配使用\njinnan---\x3eroot---\x3ejinnan---\x3eroot---\x3ejinnan\n")])])]),e("h3",{attrs:{id:"查看指令对应的可以执行程序文件位置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看指令对应的可以执行程序文件位置"}},[n._v("#")]),n._v(" 查看指令对应的可以执行程序文件位置")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("> which  指令\n")])])]),e("h3",{attrs:{id:"目录操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#目录操作"}},[n._v("#")]),n._v(" 目录操作")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('1)创建目录  make  directory\n> mkdir  newdir\n> mkdir -p newdir/newdir/newdir     //递归方式创建多级目录\nnewdir新目录多于1个层次(2/3/4等)就设置-p参数，如果就一个新的目录则无需-p参数\n> mkdir  dir/newdir\n> mkdir  dir/dir/newdir\n> mkdir -p dir/newdir/newdir\n\n2) 移动(改名字)目录  move\n\t(目录/文件 都可以操作)\n> mv  dir1  dir2                //dir1移动到dir2目录下,并给改名字为"原名"\n> mv  dir1  dir2/newdir         //dir1移动到dir2目录下,并给改名字为newdir\n> mv  dir1/dir2  dir3/dir4      //dir2移动到dir4目录下,并给改名字为"原名"\n> mv  dir1/dir2  dir3/dir4/newdir  //dir2移动到dir4目录下,并给改名字为 newdir\n> mv  dir1/dir2  ./             //dir2移动到 当前 目录下,并给改名字为"原名"\n> mv  dir1/dir2  ./newdir           //dir2移动到 当前 目录下,并给改名字为newdir\n\n\n3) 复制(改名字)目录  copy\n\t(目录/文件 都可以操作)\n//① 复制普通文件\n> cp  file1  dir1             //file1被复制到dir1目录下一份，并给改名字为“原名”\n> cp  file1  dir1/newfile     //file1被复制到dir1目录下一份，并给改名字为newfile\n\n//② 复制目录 -r参数要求\n//recursive递归方式拷贝目录\n> cp -r dir1  dir2            //dir1被复制到dir2目录下一份，并给改名字为“原名”\n> cp -r dir1  dir2/newdir     //dir1被复制到dir2目录下一份，并给改名字为newdir\n> cp -r dir1/dir2/dir3   dir4/dir5  //dir3被复制到dir5目录下一份，并给改名字为"原名"\n\n用法： cp  [参数]   {原文件…}  {目标文件}\n\t参数：  -r  递归执行  （可复制目录树）\n\n4) 删除 remove\n> rm  filename      //普通文件删除\n> rm -r dir         //删除目录[无视层次]需要-r参数\n> rm -rf  文件      //recursive force 递归强制删除文件 force 避免删除隐藏文件的提示\n> rm -rf  /         //递归强制方式删除系统里边的全部内容\n')])])]),e("h3",{attrs:{id:"文件操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#文件操作"}},[n._v("#")]),n._v(" 文件操作")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('1) 查看文件内容\n\t>\tfile   [option] filename // file显示文件类型\n> cat  filename     //在终端显示文件全部内容\n> more filename     //通过"敲回车"方式从第一行逐行查看文件内容\n\t\t\t\t\t//不支持回看\n\t\t\t\t\t//q键 退出查看\n> less filename     //"上下左右"键方式查看文件各个部分内容\n\t\t\t\t\t//支持回看，q键 退出\n> head  -n  filename  //查看文件“前n行”内容\n> tail  -n  filename  //查看文件“末尾n行”内容\n> wc  filename      //计算文件行数\n\n2) 创建文件\n> touch  filename\n> touch  dir/filename\n参数：   -d    更改时间戳为定义值   （后面加年月日，格式：20101212）\n\n3) 追加内容(文件不存在会“自动”创建)\n> echo  内容 > filename    //给文件“覆盖写”方式追加内容\n> echo  内容 >> filename   //给文件纯追加内容\n')])])]),e("h3",{attrs:{id:"别名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#别名"}},[n._v("#")]),n._v(" 别名")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("alias rm='rm -i'\nalias cp='cp -i'\nalias mv='mv -i'\nalias ls='ls --color=auto'\nalias ll='ls -lh --color=auto'\nalias l='ls --color=auto'\nalias grep='grep --color=auto'\ndebian系统的时候要在/etc/profile里面进行设置\n")])])]),e("h3",{attrs:{id:"find"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#find"}},[n._v("#")]),n._v(" find")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('find  现值查找目录  选项  选项值  选项 选项值....\n[root@www ~]# find [PATH] [option] [action]\n选项与参数：\n\n1. 不时间有关的选项：共有 -atime, -ctime 与 -mtime ，以 -mtime 说明\n\t-mtime  n ：n 为数字，意义为在 n 天之前的『一天之内』被更改过内容的文件\n\t-mtime +n ：列出在 n 天之前(不含 n 天本身)被改动过内容的文件；\n\t-mtime -n ：列出在 n 天之内(含n 天本身)被更改过内容的文件。\n\t-newer file ：file 为一个存在参照物，列出比 file 还要新的文件\n\n![](http://qiniu.sponges.cn/201807081751_760.png?imageView2/0/w/880/h/680)\n\n[root@www ~]# find / -mtime 0\n# 那个 0 是重点！0 代表目前的时间，所以，从现在开始到 24 小时前，有改动过内容的文件都会被列出来\nfind / -mtime 3  #3天内改动过的文件\nfind / -name file –exec ls –l {} \\;\n\n\n文件的 Access time，atime 是在读取文件或者执行文件时更改的。\n文件的 Modified time，mtime 是在写入文件时随文件内容的更改而更改的。\n文件的 Create time，ctime 是在写入文件、更改所有者、权限或链接设置时随 Inode 的内容更改而更改的。\nls -lc filename 列出文件的 ctime\nls -lu filename 列出文件的 atime\nls -l filename 列出文件的 mtime\n\nfind  现值查找目录  选项  选项值  选项 选项值....\n具体选项：\n① name 根据文件名字查找指定的文件\nfind  目录  -name  完整文件名称\n> find  /  -name  passwd[完整名称]    //"递归遍历"系统全部目录查找名字等于passwd的文件\n> find  /etc  -name passwd[完整名称]   //递归遍历/etc及内部所有目录查找  名字等于passwd的文件\n\n>find  目录 -name  "an*"[部分名称]     //模糊查找文件名字以an开始的\n\n② 对查找的目录层次进行限制\n-maxdepth  限制查找的最"深"层次\n-mindepth  限制查找的最"浅"层次\n> find / -name passwd -mindepth 3 -maxdepth 4   //在3到4个层次的目录里边定位passwd文件\n\n③ 根据文件大小进行查找\nsize   单位\n> find ./  -size  50c      //在当前目录下查找大小[等于]50个字节的文件\n单位：\n\t数量         单位      实际大小\n\t100 -------\x3e 512字节：【100*512字节】\n\t50c -------\x3e 字节 ：   【50字节】\n\t50k -------\x3e 千字节： 【50*1024字节】\n\t50M -------\x3e 兆字节    【50*1024*1024字节】\n> find  ./  -size  +50c    //在当前目录下查找大小[大于]50个字节的文件\n> find  ./  -size  -50c    //在当前目录下查找大小[小于]50个字节的文件\n')])])]),e("h3",{attrs:{id:"查看命令历史"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看命令历史"}},[n._v("#")]),n._v(" 查看命令历史")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("history\nhistory -c //清空历史命令\n")])])]),e("h3",{attrs:{id:"管道"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#管道"}},[n._v("#")]),n._v(" 管道")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('grep\n-c 只输出匹配行的计数。\n-i 不区分大小写（只适用于单字符）。\n-h 查询多文件时不显示文件名。\n-l 查询多文件时只输出包含匹配字符的文件名。\n-n 显示匹配行及行号。\n-s 不显示不存在或无匹配文本的错误信息。\n-v 显示不包含匹配文本的所有行。\n\nsort -r 反向排序\ncut –d ‘分割符’ –f 取第几段\nuniq –c 计数\nwc –l 统计多少行\n\nps\n1）ps a 显示现行终端机下的所有程序，包括其他用户的程序。\n2）ps -A   显示所有程序。\n3）ps c    列出程序时，显示每个程序真正的指令名称，而不包含路径，参数或常驻服务的标示。\n4）ps -e  此参数的效果和指定"A"参数相同。\n5）ps e   列出程序时，显示每个程序所使用的环境变量。\n6）ps f    用ASCII字符显示树状结构，表达程序间的相互关系。\n7）ps -H    显示树状结构，表示程序间的相互关系。\n8）ps -N   显示所有的程序，除了执行ps指令终端机下的程序之外。\n9）ps s     采用程序信号的格式显示程序状况。\n10）ps S     列出程序时，包括已中断的子程序资料。\n11）ps -t <终端机编号> 　指定终端机编号，并列出属于该终端机的程序的状况。\n12）ps u 　 以用户为主的格式来显示程序状况。\n13）ps x 　 显示所有程序，不以终端机来区分。\n14）ps -l     較長,較詳細的顯示該PID的信息\n\nps aux | grep -i www | sort -r\n![](http://qiniu.sponges.cn/201807081809_134.png?imageView2/0/w/880/h/680)\n')])])]),e("h3",{attrs:{id:"linux中的正则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linux中的正则"}},[n._v("#")]),n._v(" linux中的正则")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("&&且\n||或\n几个概念：\n1.基本正则表达式   扩展的正则表达式  （由普通字符+元字符组成）\n2.通配                                            （由普通字符+元字符组成）\n3.元字符\n注意：正则表达式中元字符的意义和通配中元字符的意义有区别的\n\nbash shell本身不支持正则表达式，使用正则表达式的是shell的一些命令和工具，如grep,sed,awk等等\n但是bash可以使用正则表达式中的一些元字符实现通配的功能，此时的这些元字符叫通配符。\n此时通配中元字符的意义跟正则表达式中元字符的意义就不一样了。\n\n通配是指：将一个包含通配符的非具体的文件名扩展为计算机，服务器，网络上的一批具体的文件名的过程。\n\n基本正则表达式中元字符的意义如下：\n1.   *     匹配*前面的那一个字符的0次或多次\n如hel*o       heo  helo  hello  helllo  ......\n\n2.   .     匹配任意一个字符（只匹配一个，可以是空格）\n如ab.         abc  abd   ab3   ab   ......\n\n3.   ^     匹配行首，行首的字符序列必须是^后的字符序列\n如^suda       sudahuhuhuuuuuhuuh      sudaokokokokokoko   ......\n\n4.   &     匹配行尾，行尾的字符序列必须是$前的字符序列\n如suda$       jijijijijiiijijsuda     lkokokokokjijhuhsuda   ......\n特殊的  ^$      匹配一个空行\n       ^.$     匹配只有一个字符的空行\n\n5.   []    匹配字符集合中的任意一个字符（只匹配一个）\n如[1234]  [1-4]     匹配1，2，3，4的任意一个字符\n注意：^放在[]里面时，不再表示匹配行首，而是取反的意思\n[^1234]  [^1-4]       匹配不是1，2，3，4的任意一个字符\n[a-z][A-Z]*  匹配任意一个英文单词 \n\n6.   \\     用于转义元字符，使之成为普通字符\n如\\*       此时*表示一个普通字符\n\n7.   \\<\\>     用于精确匹配\n如\\<the>\\      表示精确匹配the这个单词，而不是them  then等等\n\n8.\\{\\}系列符号\n\\{n\\}       匹配前面字符的n次\n\\{n,\\}      匹配前面字符的至少n次\n\\{n,m\\}     匹配前面字符的n-m次，至少n次，至多m次\n\n如JO\\{3\\}B    匹配JOOOB\n如JO\\{3,\\}B   匹配JOOOB  JOOOOB   ......\n如JO\\{3,6\\}B  匹配JOOOB  JOOOOB   JOOOOOB   JOOOOOOB  \n\n扩展的正则表达式中元字符的意义如下：\n1.    ？    匹配前面的那一个字符的0次或1次\n如JO?B      匹配   JB     JOB    JOOB\n\n2.    +     匹配前面的那一个字符的1次或多次\n如JO+B      匹配   JOOB   JOOOB   ......\n\n3.    |与（）通常结合使用，表示一组可选的字符集合\n如re(a|o|e)d     匹配read  reod  reed\n等同于re[aoe]d       \n\n通配中的元字符的意义如下：\n1.     *       表示任意多的任意字符\n2.     ?       表示一个任意字符\n3.     ^       表示取反\n4.     []      同正则表达式的用法\n5.     {}      表示一组表达式的集合   {}中表达式是或的关系\n如ls -l  {*.cpp , [1234]*.c}            列出满足表达式*.cpp或者[1234]*.c的文件。\n")])])]),e("h3",{attrs:{id:"权限设置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#权限设置"}},[n._v("#")]),n._v(" 权限设置")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('1) "字母相对方式"设置权限\n权限： r读 w写 x执行\n用户： u主人  g同组  o其他组\nchmod  u+/-rwx, g+/-rwx, o+/-rwx  文件\n\t不同用户通过",逗号"分隔\n\t在同一个用户里边，+/-只能用“一个”\n\t"rwx"在同一个用户里边可以设置一个或多个\n\t"ugo" 每次权限操作可以设置一个或多个用户\n\n>chmod u+rw  filename        //主人增加读、写\n>chmod g-rx  filename        //同组删除读、执行\n>chmod u-w,g+x filename      //主人删除写，同组增加执行\n>chmod o+w,o-x  filename     //其他组用户“增加写、删除执行”\n\n2) "数字绝对方式" 设置权限\n读:4    写:2   执行:1\n权限类型：\n0:  没有权限\n1:  执行\n2:  写\n3:  写、执行\n4:  读\n5:  读、执行\n6:  读、写\n7： 读、写、执行\n\nchmod  ABC  filename   //ABC分别代表主人、同组、其他组用户权限\n>chmod 764  filename   //主人读、写、执行，  同组读、写，    其他读\n>chmod 777  filename   //满贯权限\n>chmod 000  filename   //所有用户没有任何权限\n\n字母和数字方式取舍：\n权限修改的比较"少"，就使用字母方式\n权限修改的比较"多"，就使用数字方式\n')])])]),e("h3",{attrs:{id:"开关机指令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#开关机指令"}},[n._v("#")]),n._v(" 开关机指令")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("># reboot    //重启\n># poweroff  //关机")])])])])}),[],!1,null,null,null);a.default=t.exports}}]);