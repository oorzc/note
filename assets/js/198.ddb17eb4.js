(window.webpackJsonp=window.webpackJsonp||[]).push([[198],{785:function(a,r,s){"use strict";s.r(r);var t=s(5),n=Object(t.a)({},(function(){var a=this,r=a.$createElement,s=a._self._c||r;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[a._v("#")]),a._v(" 数组")]),a._v(" "),s("h2",{attrs:{id:"遍历数组的三种方式及各自区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#遍历数组的三种方式及各自区别"}},[a._v("#")]),a._v(" 遍历数组的三种方式及各自区别")]),a._v(" "),s("p",[a._v("for循环"),s("br"),a._v("\nforeach循环"),s("br"),a._v("\nwhile、list()、each()组合循环")]),a._v(" "),s("p",[a._v("for 循环只能遍历索引数组"),s("br"),a._v("\nforeach 可以遍历索引和关联数组 会对数组reset()"),s("br"),a._v("\nwhile、list()、each()组合循环 也可以遍历索引和关联数组 不会对数组reset()")]),a._v(" "),s("h2",{attrs:{id:"数组键值操作函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组键值操作函数"}},[a._v("#")]),a._v(" 数组键值操作函数")]),a._v(" "),s("p",[a._v("array_values($arr);       //获得数组的值"),s("br"),a._v("\narray_keys($arr);         //获得数组的键名"),s("br"),a._v("\narray_flip($arr);         //数组中的值与键名果有重的会覆盖）"),s("br"),a._v("\narray_search('PHP',$arr); //检索给定的值， true则是严格类型"),s("br"),a._v("\narray_reverse($arr);      //将数组中的元素翻 (前后顺 )"),s("br"),a._v('\nin_array("apple", $arr);  //在数组中检索 apple'),s("br"),a._v('\narray_key_exists("apple", $arr); // 检索给定的键名在数组'),s("br"),a._v("\narray_count_values($arr);        // 统计数组中所有的次数")]),a._v(" "),s("h2",{attrs:{id:"数组回调函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组回调函数"}},[a._v("#")]),a._v(" 数组回调函数")]),a._v(" "),s("p",[a._v("array_filter(); //使用回调函数组中素，如果回 true则当前的元素包含到返中"),s("br"),a._v("\narray_walk();   //使用用户自定义函数对数组中的每个元素做回调处理"),s("br"),a._v("\narray_map()\t将用户自定义函数作用到给定数组的每个值上，返回新的值。"),s("br"),a._v("\narray_reduce()\t通过使用用户自定义函数，迭代地将数组简化为一个字符串，并返回。")]),a._v(" "),s("h2",{attrs:{id:"数组的分段和填充"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组的分段和填充"}},[a._v("#")]),a._v(" 数组的分段和填充")]),a._v(" "),s("p",[a._v("array_slice($arr, 0, 3);    //返回数组中的选定部分。"),s("br"),a._v('\narray_splice($arr, 0, 3， array("black","maroon"));     //\t把数组中的指定元素去掉并用其它值取代。'),s("br"),a._v("\narray_chunk($arr, 3,  TRUE);   //将一个数组分 TRUE为保留组的键名（割多个数")]),a._v(" "),s("h2",{attrs:{id:"数组栈，列队"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组栈，列队"}},[a._v("#")]),a._v(" 数组栈，列队")]),a._v(" "),s("p",[a._v('array_push($arr, "apple", "pear");    //将一个或多个入数组末尾（返回入栈个数'),s("br"),a._v("\narray_pop($arr);    // 将数组栈的最元出栈）"),s("br"),a._v("\narray_shift($arr);   //\t删除数组中的第一个元素，并返回被删除元素的值。"),s("br"),a._v('\narray_unshift($arr,"a",array(1,2));  //在数组的开一个或元素')]),a._v(" "),s("h2",{attrs:{id:"比较数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#比较数组"}},[a._v("#")]),a._v(" 比较数组")]),a._v(" "),s("p",[a._v("array_diff()\t    比较数组，返回两个数组的差集（只比较键值）。"),s("br"),a._v("\narray_diff_assoc()\t比较数组，返回两个数组的差集（比较键名和键值）。"),s("br"),a._v("\narray_diff_key()\t比较数组，返回两个数组的差集（只比较键名）。"),s("br"),a._v("\narray_diff_uassoc()\t比较数组，返回两个数组的差集（比较键名和键值，使用用户自定义的键名比较函数）。"),s("br"),a._v("\narray_diff_ukey()\t比较数组，返回两个数组的差集（只比较键名，使用用户自定义的键名比较函数）。")]),a._v(" "),s("h2",{attrs:{id:"数组的排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组的排序"}},[a._v("#")]),a._v(" 数组的排序")]),a._v(" "),s("p",[a._v("sort($arr);      //由小到大，名"),s("br"),a._v("\nrsort($arr);     //由大到小键名"),s("br"),a._v("\nasort($arr);     //由小到大键名"),s("br"),a._v("\narsort($arr);    //由大到小键名"),s("br"),a._v("\nksort($arr);     //按照键名序"),s("br"),a._v("\nkrsort($arr);    //按照键名序")]),a._v(" "),s("h2",{attrs:{id:"数组的计算"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组的计算"}},[a._v("#")]),a._v(" 数组的计算")]),a._v(" "),s("p",[a._v("array_sum($arr);   //对数组内有元素求和运算元素的）"),s("br"),a._v("\narray_merge($arr1, $arr2); //\t把一个或多个数组合并为一个数组。"),s("br"),a._v("\narray_diff($arr1, $arr2);           //返回差集结果"),s("br"),a._v("\narray_diff_assoc($arr1, $arr2, $arr3);  //返回差集结，键名比较"),s("br"),a._v("\narray_intersect($arr1, $arr2);  //返回交集"),s("br"),a._v("\narray_intersect_assoc($arr1, $arr2);   //返回交集组，键做比较")]),a._v(" "),s("h2",{attrs:{id:"其他的数组函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他的数组函数"}},[a._v("#")]),a._v(" 其他的数组函数")]),a._v(" "),s("p",[a._v("array_unique($arr);   //移除数组中重复新的数组困留原始名"),s("br"),a._v("\nshuffle($arr);             // 将数组的顺序打")]),a._v(" "),s("h2",{attrs:{id:"注意点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注意点"}},[a._v("#")]),a._v(" 注意点")]),a._v(" "),s("ol",[s("li",[a._v("数组  key 可以是 integer 或者 string。value 可以是任意类型")])]),a._v(" "),s("p",[s("code",[a._v("此外 key 会有如下的强制转换")]),a._v("：")]),a._v(" "),s("p",[a._v('-- 包含有合法整型值的字符串会被转换为整型。例如键名 "8" 实际会被储存为 8。但是 "08" 则不会强制转换，因为其不是一个合法的十进制数值。\n-- 浮点数也会被转换为整型，意味着其小数部分会被舍去。例如键名 8.7 实际会被储存为 8。\n-- 布尔值也会被转换成整型。即键名 true 实际会被储存为 1 而键名 false 会被储存为 0。\n-- Null 会被转换为空字符串，即键名 null 实际会被储存为 ""。\n-- 数组和对象不能被用为键名。坚持这么做会导致警告：Illegal offset type。')]),a._v(" "),s("div",{staticClass:"language-php line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[a._v("\n"),s("span",{pre:!0,attrs:{class:"token php language-php"}},[s("span",{pre:!0,attrs:{class:"token delimiter important"}},[a._v("<?php")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$array")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("    "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[a._v('"a"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[a._v('"1"')]),a._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[a._v('"b"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1.5")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[a._v('"c"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token boolean constant"}},[a._v("true")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[a._v('"d"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("var_dump")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token shell-comment comment"}},[a._v("#以上例程会输出：")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// array(1) {")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//   [1]=>")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v('//   string(1) "d"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// }")]),a._v("\n\n\n")])])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br")])]),s("ol",{attrs:{start:"2"}},[s("li",[a._v("unset() 函数允许删除数组中的某个键。但要注意数组将不会重建索引。如果需要删除后重建索引，可以用 array_values() 函数。")])]),a._v(" "),s("div",{staticClass:"language-php line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token php language-php"}},[s("span",{pre:!0,attrs:{class:"token delimiter important"}},[a._v("<?php")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[a._v("'one'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[a._v("'two'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[a._v("'three'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("unset")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$a")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/* will produce an array that would have been defined as\n   $a = array(1 => 'one', 3 => 'three');\n   and NOT\n   $a = array(1 => 'one', 2 =>'three');\n*/")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$b")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("array_values")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$a")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// Now $b is array(0 => 'one', 1 =>'three')")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ")]),a._v("\n")])])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br")])])])}),[],!1,null,null,null);r.default=n.exports}}]);