(window.webpackJsonp=window.webpackJsonp||[]).push([[147],{656:function(t,s,a){"use strict";a.r(s);var n=a(5),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"正则表达式的拆分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式的拆分"}},[t._v("#")]),t._v(" 正则表达式的拆分")]),t._v(" "),a("p",[t._v("对于一门语言的掌握程度怎么样，可以有两个角度来衡量：读和写。")]),t._v(" "),a("p",[t._v("不仅要求自己能解决问题，还要看懂别人的解决方案。代码是这样，正则表达式也是这样。")]),t._v(" "),a("p",[t._v("正则这门语言跟其他语言有一点不同，它通常就是一大堆字符，而没有所谓“语句”的概念。")]),t._v(" "),a("p",[t._v("如何能正确地把一大串正则拆分成一块一块的，成为了破解“天书”的关键。")]),t._v(" "),a("h2",{attrs:{id:"结构和操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构和操作符"}},[t._v("#")]),t._v(" 结构和操作符")]),t._v(" "),a("p",[t._v("编程语言一般都有操作符。只要有操作符，就会出现一个问题。当一大堆操作在一起时，先操作谁，又后操\n作谁呢？为了不产生歧义，就需要语言本身定义好操作顺序，即所谓的优先级。")]),t._v(" "),a("p",[t._v("而在正则表达式中，操作符都体现在结构中，即由特殊字符和普通字符所代表的一个个特殊整体。")]),t._v(" "),a("p",[t._v("JavaScript 正则表达式中，都有哪些结构呢？")]),t._v(" "),a("p",[t._v("字符字面量、字符组、量词、锚、分组、选择分支、反向引用。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("结构")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("字面量")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v('匹配一个具体字符，包括不用转义的和需要转义的。比如 a 匹配字符 "a"，又比如 \\n 匹配换行符，又比如 . 匹配小数点。')])]),t._v(" "),a("tr",[a("td",[t._v("字符组")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("匹配一个字符，可以是多种可能之一，比如 [0-9]，表示匹配一个数字。也有 \\d 的简形式。另外还有反义字符组，表示可以是除了特定字符之外任何一个字符，比如 [^0-9]，表示一个非数字字符，也有 \\D 的简写形式。")])]),t._v(" "),a("tr",[a("td",[t._v("量词")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v('表示一个字符连续出现，比如 a{1,3} 表示 "a" 字符连续出现 3 次。另外还有常见的简写形式，比如 a+ 表示 "a" 字符连续出现至少一次。')])]),t._v(" "),a("tr",[a("td",[t._v("锚")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("匹配一个位置，而不是字符。比如 ^ 匹配字符串的开头，又比如 \\b 匹配单词边界，又比如 (?=\\d) 表示数字前面的位置。")])]),t._v(" "),a("tr",[a("td",[t._v("分组")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v('用括号表示一个整体，比如 (ab)+，表示 "ab" 两个字符连续出现多次，也可以使用非捕获分组 (?:ab)+。')])]),t._v(" "),a("tr",[a("td",[t._v("分支")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("多个子表达式多选一，比如 abc")])])])]),t._v(" "),a("p",[t._v("其中涉及到的操作符有：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("操作符描述")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("操作符")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("优先级")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("转义符")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("\\")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("括号和方括号")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("(…)、(?:…)、(?=…)、(?!…)、[…]")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("2")])]),t._v(" "),a("tr",[a("td",[t._v("量词限定符")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("{m}、{m,n}、{m,}、?、*、+")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("3")])]),t._v(" "),a("tr",[a("td",[t._v("位置和序列")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("^、$、\\元字符、一般字符")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("4")])]),t._v(" "),a("tr",[a("td",[t._v("管道符（竖杠）")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("|")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("5")])])])]),t._v(" "),a("p",[t._v("上面操作符的优先级从上至下，由高到低。")]),t._v(" "),a("p",[t._v("这里，我们来分析一个正则：")]),t._v(" "),a("p",[t._v("/ab?(c|de*)+|fg/")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("由于括号的存在，所以，(c|de*) 是一个整体结构。\n在 (c|de*) 中，注意其中的量词 ，因此 e 是一个整体结构。\n又因为分支结构 | 优先级最低，因此 c 是一个整体、而 de* 是另一个整体。\n同理，整个正则分成了 a、b?、(…)+、f、g。而由于分支的原因，\n又可以分成 ab?(c|de*)+ 和 fg 这两部分。\n")])])]),a("p",[t._v("上面的分析可用其可视化形式描述如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://qiniu.sponges.cn/note/20200814150616.png",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"注意要点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意要点"}},[t._v("#")]),t._v(" 注意要点")]),t._v(" "),a("p",[t._v("关于结构和操作符，还是有几点需要强调：")]),t._v(" "),a("h3",{attrs:{id:"匹配字符串整体问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匹配字符串整体问题"}},[t._v("#")]),t._v(" 匹配字符串整体问题")]),t._v(" "),a("p",[t._v("因为是要匹配整个字符串，我们经常会在正则前后中加上锚 ^ 和 $。")]),t._v(" "),a("p",[t._v('比如要匹配目标字符串 "abc" 或者 "bcd" 时，如果一不小心，就会写成 /^abc|bcd$/。')]),t._v(" "),a("p",[t._v("而位置字符和字符序列优先级要比竖杠高，故其匹配的结构是：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://qiniu.sponges.cn/note/20200814150923.png",alt:""}})]),t._v(" "),a("p",[t._v("应该修改成:")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://qiniu.sponges.cn/note/20200814151133.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"量词连缀问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#量词连缀问题"}},[t._v("#")]),t._v(" 量词连缀问题")]),t._v(" "),a("p",[t._v("假设，要匹配这样的字符串：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v('每个字符为 "a、"b"、"c" 任选其一，')])]),t._v(" "),a("li",[a("p",[t._v("字符串的长度是 3 的倍数。")])])]),t._v(" "),a("p",[t._v("此时正则不能想当然地写成 /^[abc]{3}+$/，这样会报错，说 + 前面没什么可重复的：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://qiniu.sponges.cn/note/20200814151356.png",alt:""}})]),t._v(" "),a("p",[t._v("此时要修改成：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://qiniu.sponges.cn/note/20200814151432.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"元字符转义问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#元字符转义问题"}},[t._v("#")]),t._v(" 元字符转义问题")]),t._v(" "),a("p",[t._v("所谓元字符，就是正则中有特殊含义的字符。")]),t._v(" "),a("p",[t._v("所有结构里，用到的元字符总结如下：")]),t._v(" "),a("p",[t._v("^、$、.、*、+、?、|、\\、/、(、)、[、]、{、}、=、!、:、-,")]),t._v(" "),a("p",[t._v("当匹配上面的字符本身时，可以一律转义：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" string "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"^$.*+?|\\\\/[]{}=!:-,"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\^\\$\\.\\*\\+\\?\\|\\\\\\/\\[\\]\\{\\}\\=\\!\\:\\-\\,/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => true")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("其中 string 中的 \\ 字符也要转义的。")]),t._v(" "),a("p",[t._v("另外，在 string 中，也可以把每个字符转义，当然，转义后的结果仍是本身：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" string "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"^$.*+?|\\\\/[]{}=!:-,"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" string2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\^\\$\\.\\*\\+\\?\\|\\\\\\/\\[\\]\\{\\}\\=\\!\\:\\-\\,"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" string "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" string2 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => true")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("现在的问题是，是不是每个字符都需要转义呢？否，看情况。")]),t._v(" "),a("h4",{attrs:{id:"字符组中的元字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符组中的元字符"}},[t._v("#")]),t._v(" 字符组中的元字符")]),t._v(" "),a("p",[t._v("跟字符组相关的元字符有 [、]、^、-。因此在会引起歧义的地方进行转义。例如开头的 ^ 必须转义，不然会把整个字符组，看成反义字符组。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" string "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"^$.*+?|\\\\/[]{}=!:-,"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/[\\^$.*+?|\\\\/\\[\\]{}=!:\\-,]/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => ["^", "$", ".", "*", "+", "?", "|", "\\", "/", "[", "]", "{", "}", "=", "!", ":",')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('","')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h4",{attrs:{id:"匹配-abc-和-3-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匹配-abc-和-3-5"}},[t._v("#")]),t._v(' 匹配 "[abc]" 和 "{3,5}"')]),t._v(" "),a("p",[t._v('我们知道 [abc]，是个字符组。如果要匹配字符串 "[abc]" 时，该怎么办？')]),t._v(" "),a("p",[t._v("可以写成 /[abc]/，也可以写成 /[abc]/，测试如下：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" string "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[abc]"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\[abc]/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => "[abc]"')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("只需要在第一个方括号转义即可，因为后面的方括号构不成字符组，正则不会引发歧义，自然不需要转义。")]),t._v(" "),a("p",[t._v('同理，要匹配字符串 "{3,5}"，只需要把正则写成 /{3,5}/ 即可。')]),t._v(" "),a("p",[t._v('另外，我们知道量词有简写形式 {m,}，却没有 {,n} 的情况。虽然后者不构成量词的形式，但此时并不会报\n错。当然，匹配的字符串也是 "{,n}"，测试如下：')]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" string "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{,3}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/{,3}/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => "{,3}"')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("h4",{attrs:{id:"其余情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其余情况"}},[t._v("#")]),t._v(" 其余情况")]),t._v(" "),a("p",[t._v("比如 =、!、:、-、, 等符号，只要不在特殊结构中，并不需要转义。")]),t._v(" "),a("p",[t._v("但是，括号需要前后都转义的，如 /(123)/。")]),t._v(" "),a("p",[t._v("至于剩下的 ^、$、.、*、+、?、|、\\、/ 等字符，只要不在字符组内，都需要转义的。")]),t._v(" "),a("h2",{attrs:{id:"案例分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#案例分析"}},[t._v("#")]),t._v(" 案例分析")]),t._v(" "),a("p",[t._v("接下来分析两个例子，一个简单的，一个复杂的。")]),t._v(" "),a("h3",{attrs:{id:"身份证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#身份证"}},[t._v("#")]),t._v(" 身份证")]),t._v(" "),a("p",[t._v("正则表达式是：")]),t._v(" "),a("p",[t._v("/^(\\d{15}|\\d{17}[\\dxX])$/")]),t._v(" "),a("p",[t._v("因为竖杠 | 的优先级最低，所以正则分成了两部分 \\d{15} 和 \\d{17}[\\dxX]。")]),t._v(" "),a("p",[t._v("\\d{15} 表示 15 位连续数字。")]),t._v(" "),a("p",[t._v('\\d{17}[\\dxX] 表示 17 位连续数字，最后一位可以是数字，可以大小写字母 "x"。')]),t._v(" "),a("p",[t._v("可视化如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://qiniu.sponges.cn/note/20200814152003.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"ipv4-地址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ipv4-地址"}},[t._v("#")]),t._v(" IPV4 地址")]),t._v(" "),a("p",[t._v("正则表达式是：")]),t._v(" "),a("p",[t._v("/^((0{0,2}\\d|0?\\d{2}|1\\d{2}|2[0-4]\\d|25[0-5]).){3}(0{0,2}\\d|0?\\d{2}|1\\d{2}|2[0-4]\\d|25[0-5])$/")]),t._v(" "),a("p",[t._v("这个正则，看起来非常吓人。但是熟悉优先级后，会立马得出如下的结构：")]),t._v(" "),a("p",[t._v("((…).){3}(…)")]),t._v(" "),a("p",[t._v("其中，两个 (…) 是一样的结构。表示匹配的是 3 位数字。因此整个结构是")]),t._v(" "),a("p",[t._v("3位数.3位数.3位数.3位数")]),t._v(" "),a("p",[t._v("然后再来分析 (…)：")]),t._v(" "),a("p",[t._v("(0{0,2}\\d|0?\\d{2}|1\\d{2}|2[0-4]\\d|25[0-5])")]),t._v(" "),a("p",[t._v("它是一个多选结构，分成5个部分：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v('0{0,2}\\d，匹配一位数，包括 "0" 补齐的。比如，"9"、"09"、"009"；\n0?\\d{2}，匹配两位数，包括 "0" 补齐的，也包括一位数；\n1\\d{2}，匹配 "100" 到 "199";\n2[0-4]\\d，匹配 "200" 到 "249"；\n25[0-5]，匹配 "250" 到 "255"。\n')])])]),a("p",[t._v("最后来看一下其可视化形式：\n"),a("img",{attrs:{src:"http://qiniu.sponges.cn/note/20200814152223.png",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"本章小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本章小结"}},[t._v("#")]),t._v(" 本章小结")]),t._v(" "),a("p",[t._v("掌握正则表达式中的优先级后，再看任何正则应该都有信心分析下去了。")]),t._v(" "),a("p",[t._v("至于例子，不一而足，没有写太多。")]),t._v(" "),a("p",[t._v("这里稍微总结一下，竖杠的优先级最低，即最后运算。")]),t._v(" "),a("p",[t._v("只要知道这一点，就能读懂大部分正则。")]),t._v(" "),a("p",[t._v("另外关于元字符转义问题，当自己不确定与否时，尽管去转义，总之是不会错的。")])])}),[],!1,null,null,null);s.default=e.exports}}]);