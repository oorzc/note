(window.webpackJsonp=window.webpackJsonp||[]).push([[224],{737:function(s,a,t){"use strict";t.r(a);var n=t(5),r=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h3",{attrs:{id:"_1-步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-步骤"}},[s._v("#")]),s._v(" 1. 步骤")]),s._v(" "),t("p",[s._v("希尔排序(Shell's Sort)是插入排序的一种又称“"),t("em",[s._v("缩小增量排序")]),s._v("”(Diminishing Increment Sort)，是直接插入排序算法的一种更高效的改进版本。希尔排序是非稳定排序算法。该方法因 D.L.Shell 于 1959 年提出而得名。")]),s._v(" "),t("p",[s._v("该方法的基本思想是：先将整个待排元素序列分割成若干个子序列（由相隔某个“增量”的元素组成的）分别进行直接插入排序，然后依次缩减增量再进行排序，待整个序列中的元素基本有序（增量足够小）时，再对全体元素进行一次直接插入排序。因为直接插入排序在元素基本有序的情况下（接近最好情况），效率是很高的，因此希尔排序在时间效率上比前两种方法有较大提高。")]),s._v(" "),t("p",[s._v("具体步骤如下：")]),s._v(" "),t("ol",[t("li",[s._v("选择一个序列 t1、t2、...、ti、tj、...、tk，其中 ti > tj, tk = 1，作为增量序列；")]),s._v(" "),t("li",[s._v("依次按照增量序列的值 k 对数据进行分组，每组数据间隔为 k，再对每组数据进行组内插入排序；")]),s._v(" "),t("li",[s._v("重复执行第 2 步，直到增量序列的值 k 为 1 时，将整个数据作为一个组进行处理。")])]),s._v(" "),t("h3",{attrs:{id:"_2-动态图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-动态图"}},[s._v("#")]),s._v(" 2. 动态图")]),s._v(" "),t("p",[s._v("动态图如下：")]),s._v(" "),t("p",[t("img",{attrs:{src:"http://cnd.qiniu.lin07ux.cn/Yhs12z.gif",alt:""}})]),s._v(" "),t("p",[s._v("假设原数据为："),t("code",[s._v("[8, 3, 6, 7, 4, 9, 2, 5]")]),s._v("。对其进行希尔排序，分解步骤如下：")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("设置初始化增量值为"),t("code",[s._v("$gap = $length / 2 = 4")]),s._v("，将数组分为四组"),t("code",[s._v("[8, 4], [3, 9], [6, 2], [7, 5]")]),s._v("。")]),s._v(" "),t("img",{attrs:{src:"http://cnd.qiniu.lin07ux.cn/markdown/1556433389080.png "}}),s._v(" "),t("p",[s._v("组内插入排序结果为"),t("code",[s._v("[4, 8], [3, 9], [2, 6], [5, 7]")]),s._v("，结果集为"),t("code",[s._v("[4, 3, 2, 5, 8, 9, 6, 7]")]),s._v("。")])]),s._v(" "),t("li",[t("p",[s._v("缩小增量值"),t("code",[s._v("gap = gap / 2 = 2")]),s._v("，将数据分为两组"),t("code",[s._v("[4, 2, 8, 6], [3, 5, 9, 7]")]),s._v("。")]),s._v(" "),t("img",{attrs:{src:"http://cnd.qiniu.lin07ux.cn/markdown/1556433491070.png"}}),s._v(" "),t("p",[s._v("组内插入排序结果为"),t("code",[s._v("[2, 4, 6, 8], [3, 5, 7, 9]")]),s._v("，结果集为"),t("code",[s._v("[2, 3, 4, 5, 6, 7, 8, 9]")]),s._v("。(此时由于是巧合刚好已经是有序的了，但是依旧要继续缩小增量)。")])]),s._v(" "),t("li",[t("p",[s._v("缩小增量值"),t("code",[s._v("gap = gap / 2 = 1")]),s._v("，将数据分为一组"),t("code",[s._v("[2, 3, 4, 5, 6, 7, 8, 9]")]),s._v("。")]),s._v(" "),t("img",{attrs:{src:"http://cnd.qiniu.lin07ux.cn/markdown/1556433611535.png"}}),s._v(" "),t("p",[s._v("组内排序结果为"),t("code",[s._v("[2, 3, 4, 5, 6, 7, 8, 9]")]),s._v("。")])]),s._v(" "),t("li",[t("p",[s._v("由于增量值已经是 1 了，所以结束排序流程，当前结果已经是有序的了。")])])]),s._v(" "),t("h3",{attrs:{id:"_3-代码实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-代码实现"}},[s._v("#")]),s._v(" 3. 代码实现")]),s._v(" "),t("div",{staticClass:"language-php line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-php"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("shellSort")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$arr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$len")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$arr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 缩小增量，每次都取原先值的 1/2 的向下取整的值，$gap >> 1 === floor($gap / 2)")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$gap")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$len")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$gap")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$gap")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$gap")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 使用增量进行分组")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$i")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$gap")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$i")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$len")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$i")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$temp")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$arr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$i")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$j")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$i")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$gap")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            \n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 对组内数据进行插入排序")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$j")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$arr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$j")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$temp")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$arr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$j")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$gap")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$arr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$j")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$j")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$gap")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            \n            "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$arr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$j")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$gap")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$temp")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$arr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br")])]),t("h3",{attrs:{id:"_4-测试示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-测试示例"}},[s._v("#")]),s._v(" 4. 测试示例")]),s._v(" "),t("div",{staticClass:"language-php line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-php"}},[t("code",[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$startTime")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("microtime")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$arr")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("range")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("shuffle")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$arr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[s._v('"before sort: "')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("implode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[s._v("', '")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$arr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[s._v('"\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$sortArr")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("shellSort")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$arr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[s._v('"after sort: "')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("implode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[s._v("', '")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$sortArr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[s._v('"\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[s._v('"use time: "')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("microtime")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$startTime")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[s._v('"s\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("h3",{attrs:{id:"_5-复杂度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-复杂度"}},[s._v("#")]),s._v(" 5. 复杂度")]),s._v(" "),t("p",[s._v("希尔排序的时间复杂度取决于初始增量的选取，对于本文所选去的初始增量方式时间复杂度为"),t("code",[s._v("O(nlog2(n))")]),s._v("。")]),s._v(" "),t("p",[s._v("只用到了一个临时变量，所以"),t("strong",[s._v("空间复杂度为"),t("code",[s._v("O(1)")])]),s._v("。")]),s._v(" "),t("p",[s._v("希尔排序的增量序列可以自由指定，目前并没有一个统一的定论说明什么增量序列最合适。")]),s._v(" "),t("h3",{attrs:{id:"_6-希尔排序打破二次时间界的原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-希尔排序打破二次时间界的原理"}},[s._v("#")]),s._v(" 6. 希尔排序打破二次时间界的原理")]),s._v(" "),t("p",[s._v("冒泡排序、选择排序、插入排序的时间复杂度都是"),t("code",[s._v("O(n^2)")]),s._v("，而作为插入排序改进版的希尔排序，时间复杂度第一次突破了二次时间屏障，这跟希尔排序的特殊交换方式有关。")]),s._v(" "),t("p",[s._v("要明白希尔排序为何能够通过非相邻交换方式突破二次时间屏障，需要先了解排序中的一些概念：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("逆序")]),s._v("：数据列中，具有性质"),t("code",[s._v("i < j")]),s._v("但"),t("code",[s._v("a[i] > a[j]")]),s._v("的序偶"),t("code",[s._v("(a[i]，a[j])")]),s._v("表示一个逆序。")]),s._v(" "),t("li",[t("strong",[s._v("交换两个不按顺序排序的相邻元素恰好消除一个逆序")]),s._v("，而一个排过序的数组没有逆序。")]),s._v(" "),t("li",[t("strong",[s._v("交换两个不按顺序排序的不相邻元素可以消除至少一个逆序")]),s._v("。")])]),s._v(" "),t("p",[s._v("比如，序列"),t("code",[s._v("34, 8, 64, 51, 32, 21")]),s._v("有 9 个逆序，即："),t("code",[s._v("(34, 8)")]),s._v("、"),t("code",[s._v("(34, 32)")]),s._v("、"),t("code",[s._v("(34, 31)")]),s._v("、"),t("code",[s._v("(64, 51)")]),s._v("、"),t("code",[s._v("(64, 32)")]),s._v("、"),t("code",[s._v("(64, 21)")]),s._v("、"),t("code",[s._v("(51, 32)")]),s._v("、"),t("code",[s._v("(51, 21)")]),s._v("以及"),t("code",[s._v("(32, 21)")]),s._v("。这正好是需要（隐含）执行的交换次数。")]),s._v(" "),t("ul",[t("li",[s._v("如果交换元素 34 和 8，则可以消除一个逆序"),t("code",[s._v("(34, 8)")]),s._v("；")]),s._v(" "),t("li",[s._v("如果交换元素 64 和 32，则可以消除"),t("code",[s._v("(64, 51)")]),s._v("、"),t("code",[s._v("(64, 32)")]),s._v("两个逆序；")]),s._v(" "),t("li",[s._v("如果交换元素 64 和 21，则可以消除"),t("code",[s._v("(64, 51)")]),s._v("、"),t("code",[s._v("(64, 32)")]),s._v("、"),t("code",[s._v("(64， 21)")]),s._v("、"),t("code",[s._v("(51, 21)")]),s._v("、"),t("code",[s._v("(32, 21)")]),s._v("五个逆序。")])]),s._v(" "),t("p",[s._v("所以，选择合适的增量序列会有比较好的效果提升，但是具体选择什么样的增量序列并没有一定，但是有如下的一些特点：")]),s._v(" "),t("ol",[t("li",[s._v("希尔排序的运行时间依赖于增量序列的选择 ，而证明很复杂。")]),s._v(" "),t("li",[s._v("使用希尔增量时希尔排序最坏时间复杂度是"),t("code",[s._v("O(n^2)")]),s._v("。")]),s._v(" "),t("li",[s._v("使用 Hibbard 增量的希尔排序最坏时间复杂度是"),t("code",[s._v("O(n^3/2)")]),s._v("，最优时间复杂度是"),t("code",[s._v("O(n^5/4)")]),s._v("。")]),s._v(" "),t("li",[s._v("使用 Sedgewick 增量序列排序最坏时间复杂度是"),t("code",[s._v("O(n^4/3)")]),s._v("；平均时间复杂度是"),t("code",[s._v("O(n^7/6)")]),s._v("。最好的序列是"),t("code",[s._v("{1,5,19,41,109...}")]),s._v("。该序列中的项或者是"),t("code",[s._v("9 * 4^i - 9 * 2^i +1")]),s._v("的形式，或者是"),t("code",[s._v("4^i- 3*2^i + 1")]),s._v("的形式。")])]),s._v(" "),t("p",[s._v("希尔排序是不稳定的排序。因为每一趟的步长不一样，所以步长长的插入排序可能会把后面的元素插入到前面。")]),s._v(" "),t("blockquote",[t("p",[s._v("转摘："),t("a",{attrs:{href:"http://www.cnblogs.com/9dragon/p/10720032.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("你知道希尔排序为什么可以打破二次时间界吗？"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);